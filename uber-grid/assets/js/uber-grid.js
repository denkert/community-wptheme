// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(jQuery) {
    var $, $event, FooBoxAdapter, JetpackAdapter, LightboxAdapter, MagnificPopupAdapter, PrettyPhotoAdapter, SwipeboxAdapter, UberGrid, UberGridCell, UberGridPagination, dispatchMethod, iLightboxAdapter, is_touch_device, resizeTimeout;
    if (!jQuery) {
      alert("Message from UberGrid: jQuery not found!");
    } else if (parseInt(jQuery().jquery.replace(/\./g, "")) < 172) {
      alert("Message from UberGrid You have jQuery < 1.7.2. Please upgrade your jQuery or enable \"Force new jQuery version\" option at UberGrid settings page.");
    } else {
      if (!Packery) {
        alert("Message from UberGrid: Packery library is not loaded. Please contact UberGrid developer for help.");
      } else {
        $ = jQuery;
        $event = $.event;
        dispatchMethod = ($.event.handle ? "handle" : "dispatch");
        resizeTimeout = void 0;
        $event.special.smartresize = {
          setup: function() {
            $(this).bind("resize", $event.special.smartresize.handler);
          },
          teardown: function() {
            $(this).unbind("resize", $event.special.smartresize.handler);
          },
          handler: function(event, execAsap) {
            var args, context;
            context = this;
            args = arguments;
            event.type = "smartresize";
            if (resizeTimeout) {
              clearTimeout(resizeTimeout);
            }
            resizeTimeout = setTimeout(function() {
              $event[dispatchMethod].apply(context, args);
            }, (execAsap === "execAsap" ? 0 : 100));
          }
        };
        $.fn.smartresize = function(fn) {
          if (fn) {
            return this.bind("smartresize", fn);
          } else {
            return this.trigger("smartresize", ["execAsap"]);
          }
        };
        is_touch_device = function() {
          var ua;
          ua = navigator.userAgent;
          return !!(__indexOf.call(document, 'createTouch') >= 0 || screen.width <= 699 || ua.match(/(iPhone|iPod|iPad)/) || ua.match(/BlackBerry/) || ua.match(/Android/));
        };
        LightboxAdapter = (function() {
          function LightboxAdapter(grid, $el) {
            this.onPrevSlide = __bind(this.onPrevSlide, this);
            this.onNextSlide = __bind(this.onNextSlide, this);
            this.onAfterClose = __bind(this.onAfterClose, this);
            this.onKeyUp = __bind(this.onKeyUp, this);
            this.onDeeplinkOpened = __bind(this.onDeeplinkOpened, this);
            this.setHash = __bind(this.setHash, this);
            this.getSlug = __bind(this.getSlug, this);
            this.getId = __bind(this.getId, this);
            this.getLightboxImageHeight = __bind(this.getLightboxImageHeight, this);
            this.getLightboxImageWidth = __bind(this.getLightboxImageWidth, this);
            this.getLightboxImageTitle = __bind(this.getLightboxImageTitle, this);
            this.getLightboxImageCaption = __bind(this.getLightboxImageCaption, this);
            this.getLightboxImageThumbnailUrl = __bind(this.getLightboxImageThumbnailUrl, this);
            this.getLightboxImageUrl = __bind(this.getLightboxImageUrl, this);
            this.onImageClicked = __bind(this.onImageClicked, this);
            this.getLightboxLinks = __bind(this.getLightboxLinks, this);
            this.getLightboxImages = __bind(this.getLightboxImages, this);
            this.reset = __bind(this.reset, this);
            this.addImages = __bind(this.addImages, this);
            this.clickImage = __bind(this.clickImage, this);
            this.loadDeepLink = __bind(this.loadDeepLink, this);
            this.checkForDeeplink = __bind(this.checkForDeeplink, this);
            this.grid = grid;
            this.$el = $el;
            this.reset();
            this.checkForDeeplink();
          }

          LightboxAdapter.prototype.checkForDeeplink = function() {
            var gridId, image, page;
            if (location.hash.match(/^#\d+\-/)) {
              gridId = location.hash.replace(/^#/, '').replace(/[^\d]+.*$/, '');
              if (gridId !== this.getId()) {
                return;
              }
              page = parseInt(location.hash.replace(/\/[^\/]+$/, '').replace(/[^\/]+\//, ''));
              image = location.hash.replace(/^.*\//, '');
              return this.loadDeepLink(page, image);
            }
          };

          LightboxAdapter.prototype.loadDeepLink = function(page, image) {
            if (this.grid.pagination) {
              if (this.grid.pagination.pages[page]) {
                this.grid.pagination.showPage(page);
                return this.clickImage(image);
              } else {
                return this.grid.pagination.loadPage(page, (function(_this) {
                  return function() {
                    return _this.clickImage(image);
                  };
                })(this));
              }
            } else {
              return this.clickImage(image);
            }
          };

          LightboxAdapter.prototype.clickImage = function(image) {
            var cell, _i, _len, _ref, _results;
            _ref = this.getLightboxLinks().closest('.uber-grid-cell');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cell = _ref[_i];
              if (jQuery(cell).attr('data-slug') === image) {
                _results.push(jQuery(cell).find('a.uber-grid-lightbox').click());
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };

          LightboxAdapter.prototype.addImages = function(images) {};

          LightboxAdapter.prototype.reset = function() {
            return this.getLightboxLinks().on('click:ubergrid', this.onImageClicked);
          };

          LightboxAdapter.prototype.imageSelector = '.uber-grid-cell:has(a.uber-grid-cell-wrapper.uber-grid-lightbox):not(.uber-grid-blurred), .uber-grid-cell:has(a.uber-grid-hover.uber-grid-lightbox):not(.uber-grid-blurred)';

          LightboxAdapter.prototype.linkSelector = '.uber-grid-cell:not(.uber-grid-blurred) a.uber-grid-cell-wrapper.uber-grid-lightbox, .uber-grid-cell:not(.uber-grid-blurred) a.uber-grid-hover.uber-grid-lightbox';

          LightboxAdapter.prototype.getLightboxImages = function() {
            return this.$el.find(this.imageSelector);
          };

          LightboxAdapter.prototype.getLightboxLinks = function() {
            return this.$el.find(this.linkSelector);
          };

          LightboxAdapter.prototype.onImageClicked = function(event) {
            var cell;
            cell = jQuery(event.target).closest('.uber-grid-cell');
            this.scrollTop = jQuery(document).scrollTop();
            return this.setHash(cell);
          };

          LightboxAdapter.prototype.getLightboxImageUrl = function(el) {
            return jQuery(el).find('a.uber-grid-cell-wrapper, a.uber-grid-hover').attr('href');
          };

          LightboxAdapter.prototype.getLightboxImageThumbnailUrl = function(el) {
            return jQuery(el).find('img.uber-grid-cell-image').attr('src');
          };

          LightboxAdapter.prototype.getLightboxImageCaption = function(el) {
            return jQuery(el).find('.uber-grid-lightbox-content div').html();
          };

          LightboxAdapter.prototype.getLightboxImageTitle = function(el) {
            return jQuery(el).find('.uber-grid-lightbox-content h3').html();
          };

          LightboxAdapter.prototype.getLightboxImageWidth = function(el) {
            return jQuery(el).find('img.uber-grid-image').data('lightbox-width');
          };

          LightboxAdapter.prototype.getLightboxImageHeight = function(el) {
            return jQuery(el).find('img.uber-grid-image').data('lightbox-width');
          };

          LightboxAdapter.prototype.getId = function() {
            return this.$el.attr('id').replace('uber-grid-', '');
          };

          LightboxAdapter.prototype.getSlug = function() {
            return this.$el.closest('.uber-grid-wrapper').attr('data-slug');
          };

          LightboxAdapter.prototype.setHash = function(cell) {
            var id, page, slug;
            slug = cell.attr('data-slug');
            page = this.grid.pagination ? this.grid.pagination.currentPage : 1;
            id = this.getId();
            return location.hash = "" + id + "-" + (this.getSlug()) + "/" + page + "/" + slug;
          };

          LightboxAdapter.prototype.resetHash = function() {
            if (this.prevHash) {
              location.hash = this.prevHash;
              delete this.prevHash;
            } else {
              location.hash = '#';
            }
            if (this.scrollTop && this.scrollTop > 0) {
              return jQuery(document).scrollTop(this.scrollTop);
            }
          };

          LightboxAdapter.prototype.onDeeplinkOpened = function() {};

          LightboxAdapter.prototype.onKeyUp = function(event) {
            if (event.keyCode === 37) {
              return this.onPrevSlide();
            } else if (event.keyCode === 39) {
              return this.onNextSlide();
            } else if (event.keyCode === 27) {
              return this.onAfterClose();
            }
          };

          LightboxAdapter.prototype.onAfterClose = function() {
            jQuery(window).off('keyup', this.onKeyup);
            return this.resetHash();
          };

          LightboxAdapter.prototype.onNextSlide = function() {
            var lightboxLinks;
            this.currentIndex += 1;
            lightboxLinks = this.getLightboxLinks();
            if (this.currentIndex === lightboxLinks.length) {
              this.currentIndex = lightboxLinks.length - 1;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.uber-grid-cell'));
          };

          LightboxAdapter.prototype.onPrevSlide = function() {
            this.currentIndex -= 1;
            if (this.currentIndex < 0) {
              this.currentIndex = 0;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.uber-grid-cell'));
          };

          return LightboxAdapter;

        })();
        FooBoxAdapter = (function(_super) {
          __extends(FooBoxAdapter, _super);

          function FooBoxAdapter(grid, $el) {
            this.reset = __bind(this.reset, this);
            if (!$el.foobox) {
              alert("Foobox is not detected!");
              return;
            }
            FooBoxAdapter.__super__.constructor.call(this, grid, $el);
            this.reset();
          }

          FooBoxAdapter.prototype.reset = function() {
            var fooboxOptions, image, images, _i, _len, _ref;
            FooBoxAdapter.__super__.reset.call(this);
            _ref = images = this.getLightboxImages();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              image = _ref[_i];
              image = jQuery(image);
              image.find('.uber-grid-hover').data({
                width: this.getLightboxImageWidth(image),
                height: this.getLightboxImageHeight(image)
              });
              image.attr('title', this.getLightboxImageCaption(image));
              image.find('img').attr('alt', this.getLightboxImageTitle(image));
            }
            fooboxOptions = {
              selector: this.imageSelector
            };
            if (window.FOOBOX.o) {
              fooboxOptions = jQuery.extend(window.FOOBOX.o, {
                deeplinking: false,
                affiliate: false,
                slideshow: {
                  enabled: true
                },
                selector: this.linkSelector
              });
            }
            return this.$el.foobox(fooboxOptions).on('foobox.afterLoad', (function(_this) {
              return function(event) {
                return _this.setHash(images.eq(event.fb.item.index).closest('.uber-grid-cell'));
              };
            })(this)).on('foobox.close', (function(_this) {
              return function() {
                return _this.resetHash();
              };
            })(this));
          };

          return FooBoxAdapter;

        })(LightboxAdapter);
        MagnificPopupAdapter = (function(_super) {
          __extends(MagnificPopupAdapter, _super);

          function MagnificPopupAdapter(grid, $el) {
            this.onImageClicked = __bind(this.onImageClicked, this);
            MagnificPopupAdapter.__super__.constructor.call(this, grid, $el);
          }

          MagnificPopupAdapter.prototype.onImageClicked = function(event) {
            var index, items, masterPopupSettings, settings, _this;
            _this = this;
            if (jQuery(event.target).closest('.uber-grid-cell').is('.uber-grid-blurred')) {
              event.preventDefault();
              event.stopPropagation();
              return false;
            }
            MagnificPopupAdapter.__super__.onImageClicked.call(this, event);
            event.preventDefault();
            masterPopupSettings = {
              gallery: {
                enabled: true,
                navigateByImgClick: true,
                preload: [1, 1]
              },
              closeBtnInside: true,
              mainClass: 'mfp-fade',
              closeMarkup: '<button title="%title%" type="button" class="mfp-close"></button>'
            };
            items = this.getLightboxLinks();
            index = items.index(jQuery(event.target).closest('a.uber-grid-lightbox'));
            settings = jQuery.extend(masterPopupSettings, {
              items: jQuery.map(items, function(item) {
                var isImage, isInline;
                isImage = function() {
                  return item.attr('href').match(/(\.jpe?g|\.png|\.gif)$/i);
                };
                isInline = function() {
                  return item.attr('href').match(/^#/);
                };
                item = jQuery(item);
                settings = {
                  src: item.attr('href')
                };
                if (isInline()) {
                  settings.type = 'inline';
                  if (settings.src === '#') {
                    settings.src = jQuery(item.closest('div.uber-grid-cell').find('.uber-grid-lightbox-content-wrapper').html());
                  }
                } else if (isImage()) {
                  settings.type = 'image';
                } else {
                  settings.type = 'iframe';
                }
                settings.ubergridCell = item.closest('div.uber-grid-cell');
                return settings;
              }),
              image: {
                titleSrc: function() {
                  if (this.currItem.data.ubergridCell.find('.uber-grid-lightbox-content-wrapper').size()) {
                    return this.currItem.data.ubergridCell.find('.uber-grid-lightbox-content-wrapper').html();
                  }
                  return '';
                },
                markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<div class="mfp-uber-grid-border"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>'
              },
              callbacks: {
                open: (function() {
                  return jQuery('.mfp-wrap').addClass('mfp-uber-grid');
                }),
                markupParse: (function(template) {
                  return template.find('.mfp-counter').remove();
                }),
                afterClose: (function(_this) {
                  return function() {
                    return _this.resetHash();
                  };
                })(this),
                afterChange: function() {
                  if (!is_touch_device()) {
                    jQuery('.mfp-bottom-bar').addClass('uber-grid-visible').height();
                    setTimeout((function() {
                      return jQuery('.mfp-bottom-bar').removeClass('uber-grid-visible');
                    }), 1500);
                  }
                  return _this.setHash(this.currItem.data.ubergridCell);
                }
              }
            });
            jQuery.magnificPopup.open(settings, index);
            return jQuery('.mfp-bottom-bar').addClass('uber-grid-visible').height();
          };

          return MagnificPopupAdapter;

        })(LightboxAdapter);
        JetpackAdapter = (function(_super) {
          __extends(JetpackAdapter, _super);

          function JetpackAdapter(grid, $el) {
            this.onPrevSlide = __bind(this.onPrevSlide, this);
            this.onNextSlide = __bind(this.onNextSlide, this);
            this.onAfterClose = __bind(this.onAfterClose, this);
            this.setHashFromCurrentIndex = __bind(this.setHashFromCurrentIndex, this);
            this.onImageClicked = __bind(this.onImageClicked, this);
            this.reset = __bind(this.reset, this);
            JetpackAdapter.__super__.constructor.call(this, grid, $el);
            this.$el.data('carousel-extra', {
              blog_id: 1,
              permalink: 'http://awesome-gallery.dev'
            });
          }

          JetpackAdapter.prototype.reset = function() {
            var image, image_id, img, link, _i, _len, _ref, _results;
            JetpackAdapter.__super__.reset.apply(this, arguments);
            _ref = this.getLightboxImages().addClass('tiled-gallery-item');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              image = _ref[_i];
              image = jQuery(image);
              img = image.find('img.uber-grid-cell-image');
              link = image.closest('.uber-grid-cell').find('a.uber-grid-hover, a.uber-grid-cell-content, a.uber-grid-lightbox');
              image_id = link.data('lightbox-image-id');
              _results.push(img.data({
                'orig-file': link.attr('href'),
                'orig-size': img.data('lightbox-width') + "," + img.data('lightbox-height'),
                'large-file': link.attr('href'),
                'medium-file': link.attr('href'),
                'small-file': link.attr('href'),
                'image-title': image.find('.uber-grid-lightbox-content h3').html(),
                'image-description': image.find('.uber-grid-lightbox-content div').html(),
                'image-meta': {},
                'attachment-id': image_id ? image_id : 'asg-hack',
                'comments-opened': image_id ? 1 : null
              }));
            }
            return _results;
          };

          JetpackAdapter.prototype.onImageClicked = function(event) {
            JetpackAdapter.__super__.onImageClicked.call(this, event);
            event.preventDefault();
            this.currentIndex = this.getLightboxImages().index(jQuery(event.target).closest('.uber-grid-cell'));
            if (this.$el.jp_carousel) {
              this.$el.jp_carousel({
                start_index: this.currentIndex,
                'items_selector': ".tiled-gallery-item img.uber-grid-cell-image"
              });
              return setTimeout(this.setHashFromCurrentIndex, 400);
            } else {
              return jQuery(document).ready((function(_this) {
                return function() {
                  return setTimeout((function() {
                    return _this.$el.jp_carousel({
                      start_index: _this.currentIndex,
                      'items_selector': ".tiled-gallery-item img.uber-grid-cell-image"
                    });
                  }), setTimeout(_this.setHashFromCurrentIndex, 600), 500);
                };
              })(this));
            }
          };

          JetpackAdapter.prototype.setHashFromCurrentIndex = function() {
            this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.uber-grid-cell'));
            jQuery(document).on('click', '.jp-carousel-next-button', this.onNextSlide);
            jQuery(document).on('click', '.jp-carousel-previous-button', this.onPrevSlide);
            jQuery(document).on('keyup', this.onKeyUp);
            return jQuery(document).on('click', '.jp-carousel-close-hint', this.onAfterClose);
          };

          JetpackAdapter.prototype.onAfterClose = function() {
            JetpackAdapter.__super__.onAfterClose.apply(this, arguments);
            return jQuery(document).off('keyup', this.onKeyUp);
          };

          JetpackAdapter.prototype.onNextSlide = function() {
            var lightboxLinks;
            this.currentIndex += 1;
            lightboxLinks = this.getLightboxLinks();
            if (this.currentIndex === lightboxLinks.length) {
              this.currentIndex = 0;
            }
            return setTimeout(((function(_this) {
              return function() {
                return _this.setHash(_this.getLightboxLinks().eq(_this.currentIndex).closest('.uber-grid-cell'));
              };
            })(this)), 400);
          };

          JetpackAdapter.prototype.onPrevSlide = function() {
            this.currentIndex -= 1;
            if (this.currentIndex < 0) {
              this.currentIndex = this.getLightboxLinks().size() - 1;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.uber-grid-cell'));
          };

          return JetpackAdapter;

        })(LightboxAdapter);
        SwipeboxAdapter = (function(_super) {
          __extends(SwipeboxAdapter, _super);

          function SwipeboxAdapter(grid, $el) {
            this.onImageClicked = __bind(this.onImageClicked, this);
            SwipeboxAdapter.__super__.constructor.call(this, grid, $el);
          }

          SwipeboxAdapter.prototype.onImageClicked = function(event) {
            var elements, lightboxImages;
            SwipeboxAdapter.__super__.onImageClicked.call(this, event);
            event.preventDefault();
            lightboxImages = jQuery.map(elements = this.getLightboxImages(), (function(_this) {
              return function(image) {
                image = jQuery(image);
                return {
                  href: image.find('a.uber-grid-cell-wrapper, a.uber-grid-hover').attr('href'),
                  title: function() {
                    return image.find('.uber-grid-lightbox-content').html();
                  }
                };
              };
            })(this));
            this.currentIndex = elements.index(jQuery(event.target).closest('.uber-grid-cell'));
            jQuery.swipebox(lightboxImages, {
              initialIndexOnArray: this.currentIndex,
              afterClose: this.onAfterClose
            });
            jQuery('#swipebox-next').click(this.onNextSlide);
            jQuery('#swipebox-prev').click(this.onPrevSlide);
            return jQuery(window).on('keyup', this.onKeyUp);
          };

          return SwipeboxAdapter;

        })(LightboxAdapter);
        PrettyPhotoAdapter = (function(_super) {
          __extends(PrettyPhotoAdapter, _super);

          function PrettyPhotoAdapter(grid, $el, lightboxOptions) {
            this.onPrevSlide = __bind(this.onPrevSlide, this);
            this.onNextSlide = __bind(this.onNextSlide, this);
            this.onImageClicked = __bind(this.onImageClicked, this);
            this.onKeyUp = __bind(this.onKeyUp, this);
            this.reset = __bind(this.reset, this);
            if (!jQuery.fn.prettyPhoto) {
              alert('PrettyPhoto is not detected. Please check if your theme loads a custom jQuery.');
              return;
            }
            this.options = lightboxOptions;
            PrettyPhotoAdapter.__super__.constructor.call(this, grid, $el);
          }

          PrettyPhotoAdapter.prototype.reset = function() {
            var cell, image, link, _i, _len, _ref, _results;
            PrettyPhotoAdapter.__super__.reset.apply(this, arguments);
            this.getLightboxLinks().prettyPhoto({
              hook: 'data-lightbox',
              deeplinking: false
            });
            jQuery(document).bind('keydown.prettyphoto', this.onKeyUp);
            _ref = this.getLightboxLinks();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              link = _ref[_i];
              link = jQuery(link);
              cell = link.closest('.uber-grid-cell');
              image = cell.find('img.uber-grid-cell-image');
              if (link.is('.uber-grid-hover')) {
                image = image.clone().css('display', 'none');
                link.append(image);
              }
              _results.push(image.attr('alt', cell.find('.uber-grid-lightbox-content h3').html()).attr('title', cell.find('.uber-grid-lightbox-content div').html()));
            }
            return _results;
          };

          PrettyPhotoAdapter.prototype.onKeyUp = function(event) {
            if (event.keyCode === 37) {
              return this.onPrevSlide();
            } else if (event.keyCode === 39) {
              return this.onNextSlide();
            } else if (event.keyCode === 27) {
              return this.resetHash();
            }
          };

          PrettyPhotoAdapter.prototype.onImageClicked = function(event) {
            this.currentIndex = this.getLightboxLinks().index(jQuery(event.target));
            jQuery(window).on('click', '.pp_previous', this.onPrevSlide);
            jQuery(window).on('click', '.pp_next', this.onNextSlide);
            return PrettyPhotoAdapter.__super__.onImageClicked.call(this, event);
          };

          PrettyPhotoAdapter.prototype.onNextSlide = function() {
            var lightboxLinks;
            this.currentIndex += 1;
            lightboxLinks = this.getLightboxLinks();
            if (this.currentIndex === lightboxLinks.length) {
              this.currentIndex = lightboxLinks.length - 1;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.uber-grid-cell'));
          };

          PrettyPhotoAdapter.prototype.onPrevSlide = function() {
            this.currentIndex -= 1;
            if (this.currentIndex < 0) {
              this.currentIndex = 0;
            }
            return this.setHash(this.getLightboxLinks().eq(this.currentIndex).closest('.uber-grid-cell'));
          };

          return PrettyPhotoAdapter;

        })(LightboxAdapter);
        iLightboxAdapter = (function(_super) {
          __extends(iLightboxAdapter, _super);

          function iLightboxAdapter(grid, $el, lightboxOptions) {
            this.onImageClicked = __bind(this.onImageClicked, this);
            if (!jQuery.iLightBox) {
              alert('iLightbox not detected. Please install end enable iLightbox plugin.');
            }
            iLightboxAdapter.__super__.constructor.call(this, grid, $el);
            this.options = lightboxOptions;
          }

          iLightboxAdapter.prototype.onImageClicked = function(event) {
            var elements, index, lightboxImages, options;
            iLightboxAdapter.__super__.onImageClicked.call(this, event);
            event.preventDefault();
            elements = this.getLightboxImages();
            lightboxImages = jQuery.map(elements, (function(_this) {
              return function(el) {
                return {
                  title: _this.getLightboxImageTitle(el),
                  url: _this.getLightboxImageUrl(el),
                  caption: _this.getLightboxImageCaption(el),
                  thumbnail: _this.getLightboxImageThumbnailUrl(el)
                };
              };
            })(this));
            this.currentIndex = index = elements.index(jQuery(event.target).closest('.uber-grid-cell'));
            options = jQuery.extend(this.options, ILIGHTBOX.options && eval("(" + rawurldecode(ILIGHTBOX.options) + ")") || {});
            return jQuery.iLightBox(lightboxImages, jQuery.extend({
              startFrom: index,
              callback: {
                onAfterChange: (function(_this) {
                  return function(instance) {
                    _this.currentIndex = instance.currentItem;
                    return _this.setHash(elements.eq(_this.currentIndex).closest('.uber-grid-cell'));
                  };
                })(this),
                onHide: (function(_this) {
                  return function() {
                    return _this.resetHash();
                  };
                })(this)
              }
            }, options));
          };

          return iLightboxAdapter;

        })(LightboxAdapter);
        UberGrid = (function() {
          function UberGrid($el, options) {
            this.showGrid = __bind(this.showGrid, this);
            this.initLightbox = __bind(this.initLightbox, this);
            this.updateWidth = __bind(this.updateWidth, this);
            this.tryRetina = __bind(this.tryRetina, this);
            this.updateLayout = __bind(this.updateLayout, this);
            this.onFilterClicked = __bind(this.onFilterClicked, this);
            this.showWhenVisible = __bind(this.showWhenVisible, this);
            this.$el = jQuery($el);
            this.$el.data('ubergrid', this);
            this.$inner = this.$el.find(".uber-grid");
            this.options = options;
            this.id = this.$el.attr("id").replace("uber-grid-wrapper-", "");
            this.packery = new Packery(this.$inner[0], {
              transitionDuration: "0",
              gutter: parseInt(options.gutter),
              itemSelector: '.uber-grid-cell:not(.uber-grid-blurred)'
            });
            this.cells = [];
            this.tryRetina();
            this.$pagination = this.$el.find(".uber-grid-pagination");
            if (this.$pagination.size() > 0) {
              this.pagination = new UberGridPagination(this.$pagination, this);
            }
            this.$inner.find(">div").each((function(_this) {
              return function(index, el) {
                return _this.cells.push(new UberGridCell(jQuery(el)));
              };
            })(this));
            this.$el.find("div.uber-grid-filters > div:first-child").addClass("active");
            this.$el.find("div.uber-grid-filters > div a").click(this.onFilterClicked);
            this.initLightbox();
            jQuery(window).on('smartresize', (function(_this) {
              return function() {
                return _this.updateLayout();
              };
            })(this));
            this.showWhenVisible();
            setTimeout(this.showWhenVisible, 1000);
          }

          UberGrid.prototype.showWhenVisible = function() {
            var showNext;
            if (!this.$el.is(':visible') || this.$el.width() < 50) {
              return setTimeout(this.showWhenVisible, 500);
            } else {
              this.updateLayout();
              showNext = function() {
                if (jQuery(this).next().size() > 0) {
                  return jQuery(this).next().animate({
                    'opacity': 1
                  }, 150, showNext);
                }
              };
              return setTimeout(((function(_this) {
                return function() {
                  _this.updateLayout();
                  return _this.packery.options.transitionDuration = "0.6s";
                };
              })(this)), 400);
            }
          };

          UberGrid.prototype.onFilterClicked = function(event) {
            var a, tag;
            event.preventDefault();
            this.$el.find("div.uber-grid-filters > div").removeClass("active");
            a = jQuery(event.target);
            a.parent().addClass("active");
            tag = a.attr("href").replace(/^#/, "");
            if (tag === "") {
              jQuery.each(this.cells, function(index, cell) {
                return cell.show();
              });
            } else {
              jQuery.each(this.cells, function(index, cell) {
                if (cell.hasTag(tag)) {
                  return cell.show();
                } else {
                  return cell.blur();
                }
              });
            }
            return setTimeout((function(_this) {
              return function() {
                _this.packery.reloadItems();
                return _this.packery.layout();
              };
            })(this), 50);
          };

          UberGrid.prototype.updateLayout = function() {
            this.updateWidth();
            return setTimeout(((function(_this) {
              return function() {
                return _this.packery.layout();
              };
            })(this)), 20);
          };

          UberGrid.prototype.tryRetina = function() {
            if (window.devicePixelRatio !== undefined && window.devicePixelRatio > 1 && this.$el.not(".uber-grid-photon")) {
              return this.$el.find(".uber-grid-cell-image").each(function(index, image) {
                var src2x;
                src2x = jQuery(image).attr("src") + "&zoom=" + window.devicePixelRatio;
                return jQuery(image).attr("src", src2x).attr('data-at2x', src2x);
              });
            }
          };

          UberGrid.prototype.updateWidth = function() {
            var baseCellWidth, border, calculatedCellHeight, cellHeight, cellWidth, columns, gutter, maxWidth, options, title, titleHeight, width, _i, _len, _ref;
            options = this.options;
            width = void 0;
            cellWidth = void 0;
            cellHeight = void 0;
            gutter = void 0;
            border = void 0;
            maxWidth = parseInt(this.options.max_width);
            width = jQuery(window).width();
            if (width > 768) {
              cellWidth = options.size.width;
              cellHeight = options.size.height;
              gutter = options.gutter;
              border = options.cell_border;
            } else if (width > 440) {
              cellWidth = options.size768.width;
              cellHeight = options.size768.height;
              gutter = options.gutter_768;
              border = options.cell_border_768;
            } else {
              cellWidth = options.size440.width;
              cellHeight = options.size440.height;
              gutter = options.gutter_440;
              border = options.cell_border_440;
            }
            width = this.$el.width();
            if (!isNaN(maxWidth) && maxWidth > 0 && width > maxWidth) {
              width = maxWidth;
            }
            baseCellWidth = cellWidth = parseInt(cellWidth);
            gutter = parseInt(gutter);
            border = parseInt(border);
            if (isNaN(gutter)) {
              gutter = 0;
            }
            if (isNaN(border)) {
              border = 0;
            }
            if (options.autosize) {
              columns = Math.ceil((width + gutter) / (cellWidth + gutter + 2 * border));
              if (columns > 2 && columns % 2 === 1 && this.$inner.find(".r1c2, .r2c2").size() > 0 && this.$inner.find(".r1c1, .r2c1").size() === 0) {
                columns += 1;
              }
              if (columns > this.$inner.find(".r1c2, .r2c2").size() * 2 + this.$inner.find(".r1c1, .r2c1").size()) {
                columns = this.$inner.find(".r1c2, .r2c2").size() * 2 + this.$inner.find(".r1c1, .r2c1").size();
              }
              cellWidth = Math.floor((width + gutter) / columns) - gutter - border * 2;
              if (cellWidth > baseCellWidth) {
                cellWidth = baseCellWidth;
              }
              calculatedCellHeight = Math.floor(cellHeight * cellWidth / baseCellWidth);
              this.$el.find(".uber-grid-cells-wrapper").width(width);
              this.$el.find(".uber-grid-cell.r1c1, .uber-grid-cell.r1c1 .uber-grid-cell-wrapper").width(cellWidth);
              this.$el.find(".uber-grid-cell.r1c1 .uber-grid-cell-wrapper").height(calculatedCellHeight);
              this.$el.find(".uber-grid-cell.r1c2, .uber-grid-cell.r1c2 .uber-grid-cell-wrapper").width(cellWidth * 2 + gutter + border * 2);
              this.$el.find(".uber-grid-cell.r1c2 .uber-grid-cell-wrapper").height(calculatedCellHeight);
              this.$el.find(".uber-grid-cell.r2c1, .uber-grid-cell.r2c1 .uber-grid-cell-wrapper").width(cellWidth);
              this.$el.find(".uber-grid-cell.r2c1 .uber-grid-cell-wrapper").height(cellHeight * cellWidth / baseCellWidth * 2 + gutter + border * 2);
              this.$el.find(".uber-grid-cell.r2c2, .uber-grid-cell.r2c2 .uber-grid-cell-wrapper").width(cellWidth * 2 + gutter);
              this.$el.find(".uber-grid-cell.r2c2 .uber-grid-cell-wrapper").height(cellHeight * cellWidth / baseCellWidth * 2 + gutter + border * 2);
              _ref = this.$el.find('.uber-grid-cell-title-wrapper.uber-grid-title-position-center');
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                title = _ref[_i];
                titleHeight = jQuery(title).find('.uber-grid-cell-title').height() / 2;
                jQuery(title).find('.uber-grid-cell-title').css('margin-top', "-" + titleHeight.toString() + "px");
              }
              this.packery.columnWidth = cellWidth;
            } else {
              columns = Math.floor((width + gutter) / (cellWidth + gutter + 2 * border));
              if (columns > 4 && columns % 2 === 1 && this.$inner.find(".r1c2, .r2c2").size() > 0 && this.$inner.find(".r1c1, .r2c1").size() === 0) {
                columns -= 1;
              }
              if (columns > this.$inner.find(".r1c2, .r2c2").size() * 2 + this.$inner.find(".r1c1, .r2c1").size()) {
                columns = this.$inner.find(".r1c2, .r2c2").size() * 2 + this.$inner.find(".r1c1, .r2c1").size();
              }
              width = columns * (cellWidth + border * 2) + (columns - 1) * gutter;
              this.$el.find(".uber-grid-cells-wrapper").width(width);
            }
            return this.packery.gutter = this.packery.options.gutter = gutter;
          };

          UberGrid.prototype.initLightbox = function() {
            var lightbox_options;
            lightbox_options = this.options.lightbox.lightbox_options;
            switch (this.options.lightbox) {
              case 'magnific-popup':
                this.lightboxAdapter = new MagnificPopupAdapter(this, this.$inner, lightbox_options);
                break;
              case 'swipebox':
                this.lightboxAdapter = new SwipeboxAdapter(this, this.$inner, lightbox_options);
                break;
              case 'prettyphoto':
                this.lightboxAdapter = new PrettyPhotoAdapter(this, this.$inner, lightbox_options);
                break;
              case 'ilightbox':
                this.lightboxAdapter = new iLightboxAdapter(this, this.$inner, lightbox_options);
                break;
              case 'jetpack':
                this.lightboxAdapter = new JetpackAdapter(this, this.$inner, lightbox_options);
                break;
              case 'foobox':
                this.lightboxAdapter = new FooBoxAdapter(this, this.$inner, lightbox_options);
                break;
              default:
                null;
            }
          };

          UberGrid.prototype.showGrid = function() {
            this.$el.animate({
              opacity: 1
            }, "fast");
            setTimeout((function() {
              if (this.$el.not(":visible")) {
                this.$el.animate({
                  opacity: 1
                }, "fast");
              }
            }), 500);
          };

          return UberGrid;

        })();
        UberGridPagination = (function() {
          function UberGridPagination($pagination, grid) {
            this.layoutComplete = __bind(this.layoutComplete, this);
            this.showPage = __bind(this.showPage, this);
            this.loadPage = __bind(this.loadPage, this);
            this.$pagination = $pagination;
            this.grid = grid;
            this.$grid = this.grid.$el;
            this.pages = [];
            this.pages[1] = grid.$inner.find("div.uber-grid-cell");
            this.packery = grid.packery;
            grid.packery.on("layoutComplete", this.layoutComplete);
            this.currentPage = 1;
            $pagination.find("div.uber-grid-pagination-page").first().addClass("uber-grid-current");
            $pagination.find("div.uber-grid-pagination-page a").click((function(_this) {
              return function(event) {
                var clickedPage;
                event.preventDefault();
                clickedPage = parseInt(jQuery(event.target).attr("href").replace("#ubergrid-page-", ""));
                _this.$pagination.find("div.uber-grid-pagination-page").removeClass("uber-grid-current").eq(clickedPage - 1).addClass("uber-grid-current");
                if (_this.currentPage === clickedPage) {
                  return;
                }
                if (_this.pages[clickedPage]) {
                  return _this.showPage(clickedPage);
                } else {
                  return _this.loadPage(clickedPage);
                }
              };
            })(this));
          }

          UberGridPagination.prototype.loadPage = function(page, callback) {
            this.$grid.find(".uber-grid-cells-wrapper").append(jQuery("<div class=\"uber-grid-ajax-blur\"><span></span></div>").width(this.grid.$inner.width()).fadeIn("fast"));
            jQuery.get(this.grid.options.ajaxurl, {
              id: this.grid.id,
              page: page,
              action: "uber_grid_get_page"
            }, (function(_this) {
              return function(response) {
                _this.pages[page] = jQuery(response);
                jQuery.each(_this.pages[page], function(index, element) {
                  _this.grid.cells.push(new UberGridCell(jQuery(element)));
                });
                _this.showPage(page);
                if (typeof callback !== 'undefined') {
                  callback();
                }
              };
            })(this));
          };

          UberGridPagination.prototype.showPage = function(page) {
            this.grid.tryRetina();
            this.currentPage = page;
            this.packery.remove(this.grid.$inner.find("div.uber-grid-cell"));
            this.grid.$inner.append(this.pages[this.currentPage]);
            this.packery.appended(this.pages[this.currentPage]);
            this.grid.updateWidth();
            this.packery.layout(this.pages[this.currentPage]);
            if (this.grid.lightboxAdapter) {
              return this.grid.lightboxAdapter.reset();
            }
          };

          UberGridPagination.prototype.layoutComplete = function() {
            return this.$grid.find(".uber-grid-ajax-blur").fadeOut("fast", function() {
              return jQuery(this).remove();
            });
          };

          return UberGridPagination;

        })();
        UberGridCell = (function() {
          function UberGridCell(el) {
            this.hasTag = __bind(this.hasTag, this);
            this.onLinkClicked = __bind(this.onLinkClicked, this);
            this.toggleHover = __bind(this.toggleHover, this);
            this.hasLink = __bind(this.hasLink, this);
            this.hasHover = __bind(this.hasHover, this);
            var description;
            this.$el = el;
            this.$el.data('uber-grid-cell', this);
            description = this.$el.find(".uber-grid-cell-description");
            if (this.hasHover()) {
              if (this.hasLink()) {
                this.$el.click(this.onLinkClicked);
                this.$el.mouseleave((function(_this) {
                  return function() {
                    return _this.$el.removeClass('uber-grid-hover-active');
                  };
                })(this));
              } else {
                this.$el.click(this.toggleHover);
                this.$el.mouseleave((function(_this) {
                  return function() {
                    return _this.$el.removeClass('uber-grid-hover-active');
                  };
                })(this));
              }
            } else {
              this.$el.click((function(_this) {
                return function(event) {
                  if (_this.$el.find('.uber-grid-lightbox').size() > 0) {
                    event.preventDefault();
                    return jQuery(_this.$el.find('a.uber-grid-hover, a.uber-grid-cell-wrapper')[0]).trigger('click:ubergrid', event);
                  }
                };
              })(this));
            }
          }

          UberGridCell.prototype.hasHover = function() {
            return this.$el.find('.uber-grid-hover').size() > 0;
          };

          UberGridCell.prototype.hasLink = function() {
            return this.$el.find('a.uber-grid-hover, a.uber-grid-cell-wrapper').size() > 0;
          };

          UberGridCell.prototype.toggleHover = function() {};

          UberGridCell.prototype.onLinkClicked = function(event) {
            var link;
            if (this.$el.hasClass('uber-grid-hover-active') || !is_touch_device()) {
              event.preventDefault();
              if (this.$el.find('.uber-grid-hover.uber-grid-lightbox').size() > 0) {
                return jQuery(this.$el.find('a.uber-grid-hover, a.uber-grid-cell-wrapper')[0]).trigger('click:ubergrid', event);
              } else {
                link = this.$el.find('a.uber-grid-hover');
                if (link.attr('target') === "_blank" || link.attr('target') === "blank") {
                  return window.open(link.attr('href'));
                } else {
                  return window.location.href = this.$el.find('a.uber-grid-hover').attr('href');
                }
              }
            } else {
              this.$el.addClass('uber-grid-hover-active');
              event.preventDefault();
              return event.stopPropagation();
            }
          };

          UberGridCell.prototype.hasTag = function(tag) {
            var i, tags;
            tags = this.$el.attr("data-tags");
            if (!tags) {
              return false;
            }
            tags = tags.split(",");
            tags = jQuery.map(tags, function(tag) {
              return tag.replace(/\s+$/, "").replace(/^\s+/, "");
            });
            i = 0;
            while (i < tags.length) {
              if (tag === tags[i]) {
                return true;
              }
              i++;
            }
            return false;
          };

          UberGridCell.prototype.show = function() {
            if (this.hideTimeout) {
              clearTimeout(this.hideTimeout);
              this.hideTimeout = null;
            }
            if (this.$el.hasClass('uber-grid-blurred')) {
              return this.$el.show().removeClass('uber-grid-blurred');
            }
          };

          UberGridCell.prototype.blur = function() {
            this.$el.addClass('uber-grid-blurred');
            return this.hideTimeout = setTimeout(((function(_this) {
              return function() {
                return _this.$el.hide();
              };
            })(this)), 300);
          };

          return UberGridCell;

        })();
        window.UberGrid = UberGrid;
        jQuery(function() {
          return setTimeout((function() {
            jQuery('.uber-grid-cell a.uber-grid-cell-wrapper.uber-grid-lightbox, .uber-grid-cell a.uber-grid-hover.uber-grid-lightbox').off('click');
            return jQuery('body').off('click', '.uber-grid-cell a.uber-grid-cell-wrapper.uber-grid-lightbox, .uber-grid-cell a.uber-grid-hover.uber-grid-lightbox');
          }), 1);
        });
      }
    }
  })(window.uberGridjQuery || window.jQuery || window.$ || jQuery || $);

}).call(this);
